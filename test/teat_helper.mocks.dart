// Mocks generated by Mockito 5.4.2 from annotations
// in islamic_online_learning/test/teat_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:firebase_core/firebase_core.dart' as _i4;
import 'package:firebase_database/firebase_database.dart' as _i2;
import 'package:islamic_online_learning/core/failure.dart' as _i9;
import 'package:islamic_online_learning/features/main/data/course_model.dart'
    as _i7;
import 'package:islamic_online_learning/features/main/data/main_data_src.dart'
    as _i5;
import 'package:islamic_online_learning/features/main/domain/main_repo.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseReference_0 extends _i1.SmartFake
    implements _i2.DatabaseReference {
  _FakeDatabaseReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionResult_1 extends _i1.SmartFake
    implements _i2.TransactionResult {
  _FakeTransactionResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOnDisconnect_2 extends _i1.SmartFake implements _i2.OnDisconnect {
  _FakeOnDisconnect_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSnapshot_3 extends _i1.SmartFake implements _i2.DataSnapshot {
  _FakeDataSnapshot_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseEvent_4 extends _i1.SmartFake implements _i2.DatabaseEvent {
  _FakeDatabaseEvent_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_5 extends _i1.SmartFake implements _i2.Query {
  _FakeQuery_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_6<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_7 extends _i1.SmartFake implements _i4.FirebaseApp {
  _FakeFirebaseApp_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MainDataSrc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainDataSrc extends _i1.Mock implements _i5.MainDataSrc {
  MockMainDataSrc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.CourseModel>> getCourses(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourses,
          [page],
        ),
        returnValue:
            _i6.Future<List<_i7.CourseModel>>.value(<_i7.CourseModel>[]),
      ) as _i6.Future<List<_i7.CourseModel>>);
  @override
  _i6.Future<List<_i7.CourseModel>> getCoursesHistory() => (super.noSuchMethod(
        Invocation.method(
          #getCoursesHistory,
          [],
        ),
        returnValue:
            _i6.Future<List<_i7.CourseModel>>.value(<_i7.CourseModel>[]),
      ) as _i6.Future<List<_i7.CourseModel>>);
  @override
  _i6.Future<List<_i7.CourseModel>> getFavoriteCourses() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteCourses,
          [],
        ),
        returnValue:
            _i6.Future<List<_i7.CourseModel>>.value(<_i7.CourseModel>[]),
      ) as _i6.Future<List<_i7.CourseModel>>);
  @override
  _i6.Future<List<_i7.CourseModel>> getDownloadedCourses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDownloadedCourses,
          [],
        ),
        returnValue:
            _i6.Future<List<_i7.CourseModel>>.value(<_i7.CourseModel>[]),
      ) as _i6.Future<List<_i7.CourseModel>>);
  @override
  _i6.Future<List<String>> getUstazs() => (super.noSuchMethod(
        Invocation.method(
          #getUstazs,
          [],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);
  @override
  _i6.Future<List<String>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);
}

/// A class which mocks [DatabaseReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseReference extends _i1.Mock implements _i2.DatabaseReference {
  MockDatabaseReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseReference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#root),
        ),
      ) as _i2.DatabaseReference);
  @override
  _i2.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.DatabaseReference);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildAdded => (super.noSuchMethod(
        Invocation.getter(#onChildAdded),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildRemoved => (super.noSuchMethod(
        Invocation.getter(#onChildRemoved),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildChanged => (super.noSuchMethod(
        Invocation.getter(#onChildChanged),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildMoved => (super.noSuchMethod(
        Invocation.getter(#onChildMoved),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onValue => (super.noSuchMethod(
        Invocation.getter(#onValue),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i2.DatabaseReference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i2.DatabaseReference);
  @override
  _i2.DatabaseReference push() => (super.noSuchMethod(
        Invocation.method(
          #push,
          [],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #push,
            [],
          ),
        ),
      ) as _i2.DatabaseReference);
  @override
  _i6.Future<void> set(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setWithPriority(
    Object? value,
    Object? priority,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWithPriority,
          [
            value,
            priority,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> update(Map<String, Object?>? value) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> setPriority(Object? priority) => (super.noSuchMethod(
        Invocation.method(
          #setPriority,
          [priority],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i2.TransactionResult> runTransaction(
    _i2.TransactionHandler? transactionHandler, {
    bool? applyLocally = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {#applyLocally: applyLocally},
        ),
        returnValue:
            _i6.Future<_i2.TransactionResult>.value(_FakeTransactionResult_1(
          this,
          Invocation.method(
            #runTransaction,
            [transactionHandler],
            {#applyLocally: applyLocally},
          ),
        )),
      ) as _i6.Future<_i2.TransactionResult>);
  @override
  _i2.OnDisconnect onDisconnect() => (super.noSuchMethod(
        Invocation.method(
          #onDisconnect,
          [],
        ),
        returnValue: _FakeOnDisconnect_2(
          this,
          Invocation.method(
            #onDisconnect,
            [],
          ),
        ),
      ) as _i2.OnDisconnect);
  @override
  _i6.Future<_i2.DataSnapshot> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i6.Future<_i2.DataSnapshot>.value(_FakeDataSnapshot_3(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i6.Future<_i2.DataSnapshot>);
  @override
  _i6.Future<_i2.DatabaseEvent> once(
          [_i2.DatabaseEventType? eventType = _i2.DatabaseEventType.value]) =>
      (super.noSuchMethod(
        Invocation.method(
          #once,
          [eventType],
        ),
        returnValue: _i6.Future<_i2.DatabaseEvent>.value(_FakeDatabaseEvent_4(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
      ) as _i6.Future<_i2.DatabaseEvent>);
  @override
  _i2.Query startAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query startAfter(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query endAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query endBefore(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query equalTo(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #equalTo,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query limitToFirst(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToFirst,
          [limit],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #orderByChild,
          [path],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByKey() => (super.noSuchMethod(
        Invocation.method(
          #orderByKey,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByValue() => (super.noSuchMethod(
        Invocation.method(
          #orderByValue,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByPriority() => (super.noSuchMethod(
        Invocation.method(
          #orderByPriority,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
      ) as _i2.Query);
  @override
  _i6.Future<void> keepSynced(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #keepSynced,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [MainRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainRepo extends _i1.Mock implements _i8.MainRepo {
  MockMainRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i9.Failure, List<_i7.CourseModel>>> getCourses(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourses,
          [page],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i9.Failure, List<_i7.CourseModel>>>.value(
                _FakeEither_6<_i9.Failure, List<_i7.CourseModel>>(
          this,
          Invocation.method(
            #getCourses,
            [page],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i9.Failure, List<_i7.CourseModel>>>);
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuery extends _i1.Mock implements _i2.Query {
  MockQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.DatabaseReference);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildAdded => (super.noSuchMethod(
        Invocation.getter(#onChildAdded),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildRemoved => (super.noSuchMethod(
        Invocation.getter(#onChildRemoved),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildChanged => (super.noSuchMethod(
        Invocation.getter(#onChildChanged),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onChildMoved => (super.noSuchMethod(
        Invocation.getter(#onChildMoved),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Stream<_i2.DatabaseEvent> get onValue => (super.noSuchMethod(
        Invocation.getter(#onValue),
        returnValue: _i6.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i6.Stream<_i2.DatabaseEvent>);
  @override
  _i6.Future<_i2.DataSnapshot> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i6.Future<_i2.DataSnapshot>.value(_FakeDataSnapshot_3(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i6.Future<_i2.DataSnapshot>);
  @override
  _i6.Future<_i2.DatabaseEvent> once(
          [_i2.DatabaseEventType? eventType = _i2.DatabaseEventType.value]) =>
      (super.noSuchMethod(
        Invocation.method(
          #once,
          [eventType],
        ),
        returnValue: _i6.Future<_i2.DatabaseEvent>.value(_FakeDatabaseEvent_4(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
      ) as _i6.Future<_i2.DatabaseEvent>);
  @override
  _i2.Query startAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query startAfter(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query endAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query endBefore(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query equalTo(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #equalTo,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query limitToFirst(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToFirst,
          [limit],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #orderByChild,
          [path],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByKey() => (super.noSuchMethod(
        Invocation.method(
          #orderByKey,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByValue() => (super.noSuchMethod(
        Invocation.method(
          #orderByValue,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
      ) as _i2.Query);
  @override
  _i2.Query orderByPriority() => (super.noSuchMethod(
        Invocation.method(
          #orderByPriority,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
      ) as _i2.Query);
  @override
  _i6.Future<void> keepSynced(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #keepSynced,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [DataSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSnapshot extends _i1.Mock implements _i2.DataSnapshot {
  MockDataSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.DatabaseReference);
  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);
  @override
  Iterable<_i2.DataSnapshot> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i2.DataSnapshot>[],
      ) as Iterable<_i2.DataSnapshot>);
  @override
  bool hasChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #hasChild,
          [path],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i2.DataSnapshot child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDataSnapshot_3(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i2.DataSnapshot);
}

/// A class which mocks [FirebaseDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseDatabase extends _i1.Mock implements _i2.FirebaseDatabase {
  MockFirebaseDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_7(
          this,
          Invocation.getter(#app),
        ),
      ) as _i4.FirebaseApp);
  @override
  set app(_i4.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  void useDatabaseEmulator(
    String? host,
    int? port,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #useDatabaseEmulator,
          [
            host,
            port,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.DatabaseReference reference() => (super.noSuchMethod(
        Invocation.method(
          #reference,
          [],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #reference,
            [],
          ),
        ),
      ) as _i2.DatabaseReference);
  @override
  _i2.DatabaseReference ref([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #ref,
          [path],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
      ) as _i2.DatabaseReference);
  @override
  _i2.DatabaseReference refFromURL(String? url) => (super.noSuchMethod(
        Invocation.method(
          #refFromURL,
          [url],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
      ) as _i2.DatabaseReference);
  @override
  void setPersistenceEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setPersistenceEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setPersistenceCacheSizeBytes(int? cacheSize) => super.noSuchMethod(
        Invocation.method(
          #setPersistenceCacheSizeBytes,
          [cacheSize],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setLoggingEnabled(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #setLoggingEnabled,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> goOnline() => (super.noSuchMethod(
        Invocation.method(
          #goOnline,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> goOffline() => (super.noSuchMethod(
        Invocation.method(
          #goOffline,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> purgeOutstandingWrites() => (super.noSuchMethod(
        Invocation.method(
          #purgeOutstandingWrites,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
